@page "/AnyUiFlyoutSelectAasEntity"
@using AdminShellNS
@using Aas = AasCore.Aas3_0_RC02;
@using AasxIntegrationBase
@using AnyUi
@using AasxPackageLogic
@using BlazorUI.Data
@using BlazorInputFile
@inject BlazorUI.Data.AASService SubmodelService
@inject BlazorUI.Data.BlazorSession Session

@* see: https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/ *@

@if(EventSession != null && DialogueData is AnyUiDialogueDataSelectAasEntity ddsae)
{
	@* see Modal.razor: Bootstrap inner dialog classes *@

	<div class="modal-header">
		<h3 class="modal-title" id="exampleModalLongTitle">@((ddsae.Caption?.HasContent() != true) ? "Select AAS element" : ddsae.Caption)</h3>
		<button type="button" class="close btn btn-backdrop" aria-label="Close"
			@onclick="() => LeaveResult(false)">
			<span aria-hidden="true">&times;</span>
		</button>
	</div>

	@* limited dimensions, becaus tree-items are limited as well  *@
	<div class="modal-body my-3 row d-flex justify-content-center">
		<div class="col-md-6" style="width: 60vw!important; max-width: 1100px; min-height: 60vh!important; overflow: hidden">
			@* Filter *@
			<div class="dropdown">
				<button class="btn btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
					@_filterCurrent
				</button>
				<ul class="dropdown-menu w-100" aria-labelledby="dropdownMenuButton1">
					@for (int i = 0; i < _filterItems.Count; i++)
					{
						var currI = i; // save iteration variable
						<li><a class="dropdown-item" @onclick="() => SetFilter(currI)">@(_filterItems[i])</a></li>
					}
				</ul>
			</div>

			@* Tree *@
			<div class="modal-content-light mt-2 px-3 py-2 rounded-3">
				<span @ondblclick="() => LeaveResult(true)">
					<TreeOfAasxVisualElements Items="_displayElements.TreeItems"
						IsExpanded="@(item => ExpandedItems.Contains(item))"
						SetExpanded="@((item, state) => SetExpanded(item, state))"
						IsSelected="@(item => item == SelectedItem)"
						NodeClicked="(ve, modi) => { SelectedItem = ve; this.StateHasChanged(); }" />		
				</span>	
			</div>
		</div>
	</div>
	<div class="modal-footer">

		<button type="button" class="btn btn-secondary-light btn-lg" @onclick="() => LeaveResult(false)">Cancel</button>
		<button type="button" class="btn btn-primary-light btn-lg" @onclick="() => LeaveResult(true)">OK</button>
	
	</div>
}

@code {
	[Parameter]
	public AnyUiHtmlEventSession EventSession { get; set; }

	[Parameter]
	public AnyUiDialogueDataBase DialogueData { get; set; }

	protected BlazorVisualElements _displayElements = new BlazorVisualElements();

	protected List<string> _filterItems = new List<string>();

	protected string _filterCurrent = "All";

	protected VisualElementGeneric SelectedItem = null;
	protected ListOfVisualElementBasic ExpandedItems = new ListOfVisualElementBasic();

	private string ApplyFullFilterString(string filter)
        {
            if (filter == null)
                return null;
            var res = filter;
            if (res.Trim().ToLower() == "submodelelement")
                foreach (var s in Enum.GetNames(typeof(Aas.AasSubmodelElements)))
                    res += " " + s + " ";
            if (res.Trim().ToLower() == "all")
                return null;
            else
                return " " + res + " ";
        }

	protected override void OnInitialized()
	{
		// pass thru
		base.OnInitialized();

		// access
		if (!(DialogueData is AnyUiDialogueDataSelectAasEntity ddsae))
			return;

		// fill combo box
		_filterItems.Add("All");
		foreach (var x in Enum.GetNames(typeof(Aas.KeyTypes)))
			_filterItems.Add(x);

		// select an item
		_filterCurrent = "All";
		if (ddsae.Filter != null)
			foreach (var x in _filterItems)
				if (x.ToString().Trim().ToLower() == ddsae.Filter.Trim().ToLower())
				{
					_filterCurrent = x;
					break;
				}
		
		// apply filter
		var filter = ApplyFullFilterString(_filterCurrent);
		_displayElements.RebuildAasxElements(Session.PackageCentral, ddsae.Selector, true, filter,
			expandModePrimary: 1, expandModeAux: 0,
			lazyLoadingFirst: false);
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (!firstRender || _displayElements?.TreeItems == null)
			return;

		// initially expand some of the stuff (namely all AAS)
		foreach (var aas in _displayElements.TreeItems.FindAllVisualElementOf<VisualElementAdminShell>((x) => true))
			if (aas != null)
				foreach (var ve in aas.FindAllParents(includeThis: true))
					if (!ExpandedItems.Contains(ve))
						ExpandedItems.Add(ve);

		// redisplay
		StateHasChanged();
	}

	public void LeaveResult(bool result)
	{
		EventSession?.EndModal(result);
	}

	protected void SetFilter(int i)
	{
		;
	}

	protected void SetExpanded(VisualElementGeneric ve, bool state)
	{
		if (state && !ExpandedItems.Contains(ve))
			ExpandedItems.Add(ve);

		if (!state && ExpandedItems.Contains(ve))
			ExpandedItems.Remove(ve);
	}

}
